--- st.c
+++ st.c
@@ -36,7 +36,6 @@
 #define STR_BUF_SIZ   ESC_BUF_SIZ
 #define STR_ARG_SIZ   ESC_ARG_SIZ
 #define HISTSIZE      2000
-#define RESIZEBUFFER  1000
 
 /* macros */
 #define IS_SET(flag)		((term.mode & (flag)) != 0)
@@ -44,21 +43,9 @@
 #define ISCONTROLC1(c)		(BETWEEN(c, 0x80, 0x9f))
 #define ISCONTROL(c)		(ISCONTROLC0(c) || ISCONTROLC1(c))
 #define ISDELIM(u)		(u && wcschr(worddelimiters, u))
-#define TLINE(y) ( \
-	(y) < term.scr ? term.hist[(term.histi + (y) - term.scr + 1 + HISTSIZE) % HISTSIZE] \
-	               : term.line[(y) - term.scr] \
-)
-
-#define TLINEABS(y) ( \
-	(y) < 0 ? term.hist[(term.histi + (y) + 1 + HISTSIZE) % HISTSIZE] : term.line[(y)] \
-)
-
-#define UPDATEWRAPNEXT(alt, col) do { \
-	if ((term.c.state & CURSOR_WRAPNEXT) && term.c.x + term.wrapcwidth[alt] < col) { \
-		term.c.x += term.wrapcwidth[alt]; \
-		term.c.state &= ~CURSOR_WRAPNEXT; \
-	} \
-} while (0);
+#define TLINE(y)		((y) < term.scr ? term.hist[((y) + term.histi - \
+            term.scr + HISTSIZE + 1) % HISTSIZE] : \
+            term.line[(y) - term.scr])
 
 enum term_mode {
 	MODE_WRAP        = 1 << 0,
@@ -131,11 +112,10 @@ typedef struct {
 	int row;      /* nb row */
 	int col;      /* nb col */
 	Line *line;   /* screen */
+	Line *alt;    /* alternate screen */
 	Line hist[HISTSIZE]; /* history buffer */
-	int histi;           /* history index */
-	int histf;           /* nb history available */
-	int scr;             /* scroll back */
-	int wrapcwidth[2];   /* used in updating WRAPNEXT when resizing */
+	int histi;    /* history index */
+	int scr;      /* scroll back */
 	int *dirty;   /* dirtyness of lines */
 	TCursor c;    /* cursor */
 	int ocx;      /* old cursor col */
@@ -193,37 +173,26 @@ static void tprinter(char *, size_t);
 static void tdumpsel(void);
 static void tdumpline(int);
 static void tdump(void);
-static void tclearregion(int, int, int, int, int);
+static void tclearregion(int, int, int, int);
 static void tcursor(int);
-static void tclearglyph(Glyph *, int);
-static void tresetcursor(void);
 static void tdeletechar(int);
 static void tdeleteline(int);
 static void tinsertblank(int);
 static void tinsertblankline(int);
-static int tlinelen(Line len);
-static int tiswrapped(Line line);
-static char *tgetglyphs(char *, const Glyph *, const Glyph *);
-static size_t tgetline(char *, const Glyph *);
+static int tlinelen(int);
 static void tmoveto(int, int);
 static void tmoveato(int, int);
 static void tnewline(int);
 static void tputtab(int);
 static void tputc(Rune);
 static void treset(void);
-static void tscrollup(int, int, int, int);
-static void tscrolldown(int, int);
-static void treflow(int, int);
-static void rscrolldown(int);
-static void tresizedef(int, int);
-static void tresizealt(int, int);
+static void tscrollup(int, int, int);
+static void tscrolldown(int, int, int);
 static void tsetattr(const int *, int);
 static void tsetchar(Rune, const Glyph *, int, int);
 static void tsetdirt(int, int);
 static void tsetscroll(int, int);
 static void tswapscreen(void);
-static void tloaddefscreen(int, int);
-static void tloadaltscreen(int, int);
 static void tsetmode(int, int, const int *, int);
 static int twrite(const char *, int, int);
 static void tfulldirt(void);
@@ -437,46 +403,17 @@ selinit(void)
 }
 
 int
-tlinelen(Line line)
+tlinelen(int y)
 {
-	int i = term.col - 1;
+	int i = term.col;
 
-	for (; i >= 0 && !(line[i].mode & (ATTR_SET | ATTR_WRAP)); i--);
-	return i + 1;
-}
+	if (TLINE(y)[i - 1].mode & ATTR_WRAP)
+		return i;
 
-int
-tiswrapped(Line line)
-{
-	int len = tlinelen(line);
+	while (i > 0 && TLINE(y)[i - 1].u == ' ')
+		--i;
 
-	return len > 0 && (line[len - 1].mode & ATTR_WRAP);
-}
-
-char *
-tgetglyphs(char *buf, const Glyph *gp, const Glyph *lgp)
-{
-	while (gp <= lgp)
-		if (gp->mode & ATTR_WDUMMY) {
-			gp++;
-		} else {
-			buf += utf8encode((gp++)->u, buf);
-		}
-	return buf;
-}
-
-size_t
-tgetline(char *buf, const Glyph *fgp)
-{
-	char *ptr;
-	const Glyph *lgp = &fgp[term.col - 1];
-
-	while (lgp > fgp && !(lgp->mode & (ATTR_SET | ATTR_WRAP)))
-		lgp--;
-	ptr = tgetglyphs(buf, fgp, lgp);
-	if (!(lgp->mode & ATTR_WRAP))
-		*(ptr++) = '\n';
-	return ptr - buf;
+	return i;
 }
 
 void
@@ -905,8 +836,9 @@ void
 ttywrite(const char *s, size_t n, int may_echo)
 {
 	const char *next;
+	Arg arg = (Arg) { .i = term.scr };
 
-    kscrolldown(&((Arg){ .i = term.scr }));
+	kscrolldown(&arg);
 
 	if (may_echo && IS_SET(MODE_ECHO))
 		twrite(s, n, 1);
@@ -1043,7 +975,7 @@ tsetdirtattr(int attr)
 	for (i = 0; i < term.row-1; i++) {
 		for (j = 0; j < term.col-1; j++) {
 			if (term.line[i][j].mode & attr) {
-				term.dirty[i] = 1;
+				tsetdirt(i, i);
 				break;
 			}
 		}
@@ -1070,261 +1001,162 @@ tcursor(int mode)
 	}
 }
 
-void
-tresetcursor(void)
-{
-	term.c = (TCursor){ { .mode = ATTR_NULL, .fg = defaultfg, .bg = defaultbg },
-	                    .x = 0, .y = 0, .state = CURSOR_DEFAULT };
-}
-
 void
 treset(void)
 {
 	uint i;
-    int x, y;
 
-	tresetcursor();
+	term.c = (TCursor){{
+		.mode = ATTR_NULL,
+		.fg = defaultfg,
+		.bg = defaultbg
+	}, .x = 0, .y = 0, .state = CURSOR_DEFAULT};
 
 	memset(term.tabs, 0, term.col * sizeof(*term.tabs));
 	for (i = tabspaces; i < term.col; i += tabspaces)
 		term.tabs[i] = 1;
 	term.top = 0;
-	term.histf = 0;
-	term.scr = 0;
 	term.bot = term.row - 1;
 	term.mode = MODE_WRAP|MODE_UTF8;
 	memset(term.trantbl, CS_USA, sizeof(term.trantbl));
 	term.charset = 0;
 
-    selremove();
 	for (i = 0; i < 2; i++) {
-        tcursor(CURSOR_SAVE); /* reset saved cursor */
-        for (y = 0; y < term.row; y++)
-            for (x = 0; x < term.col; x++)
-                tclearglyph(&term.line[y][x], 0);
-        tswapscreen();
+		tmoveto(0, 0);
+		tcursor(CURSOR_SAVE);
+		tclearregion(0, 0, term.col-1, term.row-1);
+		tswapscreen();
 	}
-    tfulldirt();
 }
 
 void
 tnew(int col, int row)
 {
-    int i, j;
-
-    for (i = 0; i < 2; i++) {
-        term.line = xmalloc(row * sizeof(Line));
-        for (j = 0; j < row; j++)
-            term.line[j] = xmalloc(col * sizeof(Glyph));
-        term.col = col, term.row = row;
-        tswapscreen();
-    }
-    term.dirty = xmalloc(row * sizeof(*term.dirty));
-    term.tabs = xmalloc(col * sizeof(*term.tabs));
-    for (i = 0; i < HISTSIZE; i++)
-        term.hist[i] = xmalloc(col * sizeof(Glyph));
-    treset();
+	term = (Term){ .c = { .attr = { .fg = defaultfg, .bg = defaultbg } } };
+	tresize(col, row);
+	treset();
 }
 
-/* handle it with care */
 void
 tswapscreen(void)
 {
-	static Line *altline;
-	static int altcol, altrow;
-	Line *tmpline = term.line;
-	int tmpcol = term.col, tmprow = term.row;
+	Line *tmp = term.line;
 
-	term.line = altline;
-	term.col = altcol, term.row = altrow;
-	altline = tmpline;
-	altcol = tmpcol, altrow = tmprow;
+	term.line = term.alt;
+	term.alt = tmp;
 	term.mode ^= MODE_ALTSCREEN;
+	tfulldirt();
 }
 
 void
-tloaddefscreen(int clear, int loadcursor)
+kscrolldown(const Arg* a)
 {
-	int col, row, alt = IS_SET(MODE_ALTSCREEN);
+	int n = a->i;
 
-	if (alt) {
-		if (clear)
-			tclearregion(0, 0, term.col-1, term.row-1, 1);
-		col = term.col, row = term.row;
-		tswapscreen();
-	}
-	if (loadcursor)
-		tcursor(CURSOR_LOAD);
-	if (alt)
-		tresizedef(col, row);
-}
+	if (n < 0)
+		n = term.row + n;
 
-void
-tloadaltscreen(int clear, int savecursor)
-{
-	int col, row, def = !IS_SET(MODE_ALTSCREEN);
+	if (n > term.scr)
+		n = term.scr;
 
-	if (savecursor)
-		tcursor(CURSOR_SAVE);
-	if (def) {
-		col = term.col, row = term.row;
-		tswapscreen();
-		term.scr = 0;
-		tresizealt(col, row);
+	if (term.scr > 0) {
+		term.scr -= n;
+		selscroll(0, -n);
+		tfulldirt();
 	}
-	if (clear)
-		tclearregion(0, 0, term.col-1, term.row-1, 1);
 }
 
-int
-tisaltscreen(void)
-{
-	return IS_SET(MODE_ALTSCREEN);
-}
-
-
 void
-kscrolldown(const Arg* a)
+kscrollup(const Arg* a)
 {
-    int n = a->i;
+	int n = a->i;
 
-    if (!term.scr || IS_SET(MODE_ALTSCREEN))
-        return;
+	if (n < 0)
+		n = term.row + n;
 
-    if (n < 0)
-        n = MAX(term.row / -n, 1);
-
-    if (n <= term.scr) {
-        term.scr -= n;
-    } else {
-        n = term.scr;
-        term.scr = 0;
-    }
-	if (sel.ob.x != -1 && !sel.alt)
-		selmove(-n); /* negate change in term.scr */
-	tfulldirt();
+	if (term.scr <= HISTSIZE-n) {
+		term.scr += n;
+		selscroll(0, n);
+		tfulldirt();
+	}
 }
 
-
-
 void
-kscrollup(const Arg* a)
+tscrolldown(int orig, int n, int copyhist)
 {
-    int n = a->i;
+	int i;
+	Line temp;
 
-    if (!term.histf || IS_SET(MODE_ALTSCREEN))
-        return;
+	LIMIT(n, 0, term.bot-orig+1);
 
-    if (n < 0)
-        n = MAX(term.row / -n, 1);
+	if (copyhist) {
+		term.histi = (term.histi - 1 + HISTSIZE) % HISTSIZE;
+		temp = term.hist[term.histi];
+		term.hist[term.histi] = term.line[term.bot];
+		term.line[term.bot] = temp;
+	}
 
-    if (term.scr + n <= term.histf) {
-        term.scr += n;
-    } else {
-        n = term.histf - term.scr;
-        term.scr = term.histf;
-    }
+	tsetdirt(orig, term.bot-n);
+	tclearregion(0, term.bot-n+1, term.col-1, term.bot);
 
-    if (sel.ob.x != -1 && !sel.alt)
-        selmove(n); /* negate change in term.scr */
-    tfulldirt();
+	for (i = term.bot; i >= orig+n; i--) {
+		temp = term.line[i];
+		term.line[i] = term.line[i-n];
+		term.line[i-n] = temp;
+	}
 
+	if (term.scr == 0)
+		selscroll(orig, n);
 }
 
 void
-tscrolldown(int top, int n)
+tscrollup(int orig, int n, int copyhist)
 {
-    int i, bot = term.bot;
-    Line temp;
+	int i;
+	Line temp;
 
-    if (n <= 0)
-        return;
-    n = MIN(n, bot-top+1);
+	LIMIT(n, 0, term.bot-orig+1);
 
-    tsetdirt(top, bot-n);
-    tclearregion(0, bot-n+1, term.col-1, bot, 1);
+	if (copyhist) {
+		term.histi = (term.histi + 1) % HISTSIZE;
+		temp = term.hist[term.histi];
+		term.hist[term.histi] = term.line[orig];
+		term.line[orig] = temp;
+	}
 
-    for (i = bot; i >= top+n; i--) {
-        temp = term.line[i];
-        term.line[i] = term.line[i-n];
-        term.line[i-n] = temp;
-    }
+	if (term.scr > 0 && term.scr < HISTSIZE)
+		term.scr = MIN(term.scr + n, HISTSIZE-1);
 
-    if (sel.ob.x != -1 && sel.alt == IS_SET(MODE_ALTSCREEN))
-        selscroll(top, bot, n);
-}
+	tclearregion(0, orig, term.col-1, orig+n-1);
+	tsetdirt(orig+n, term.bot);
 
-void
-tscrollup(int top, int bot, int n, int mode)
-{
-    int i, j, s;
-    int alt = IS_SET(MODE_ALTSCREEN);
-    int savehist = !alt && top == 0 && mode != SCROLL_NOSAVEHIST;
-    Line temp;
-
-    if (n <= 0)
-        return;
-    n = MIN(n, bot-top+1);
+	for (i = orig; i <= term.bot-n; i++) {
+		temp = term.line[i];
+		term.line[i] = term.line[i+n];
+		term.line[i+n] = temp;
+	}
 
-    if (savehist) {
-        for (i = 0; i < n; i++) {
-            term.histi = (term.histi + 1) % HISTSIZE;
-            temp = term.hist[term.histi];
-            for (j = 0; j < term.col; j++)
-                tclearglyph(&temp[j], 1);
-            term.hist[term.histi] = term.line[i];
-            term.line[i] = temp;
-        }
-        term.histf = MIN(term.histf + n, HISTSIZE);
-        s = n;
-        if (term.scr) {
-            j = term.scr;
-            term.scr = MIN(j + n, HISTSIZE);
-            s = j + n - term.scr;
-        }
-        if (mode != SCROLL_RESIZE)
-            tfulldirt();
-    } else {
-        tclearregion(0, top, term.col-1, top+n-1, 1);
-        tsetdirt(top+n, bot);
-    }
-
-    for (i = top; i <= bot-n; i++) {
-        temp = term.line[i];
-        term.line[i] = term.line[i+n];
-        term.line[i+n] = temp;
-    }
-
-    if (sel.ob.x != -1 && sel.alt == alt) {
-        if (!savehist) {
-            selscroll(top, bot, -n);
-        } else if (s > 0) {
-            selmove(-s);
-            if (-term.scr + sel.nb.y < -term.histf)
-                selremove();
-        }
-    }
+	if (term.scr == 0)
+		selscroll(orig, -n);
 }
 
 void
-selmove(int n)
- {
-	sel.ob.y += n, sel.nb.y += n;
-	sel.oe.y += n, sel.ne.y += n;
-}
-
-void
-selscroll(int top, int bot, int n)
+selscroll(int orig, int n)
 {
-    /* turn absolute coordinates into relative */
-    top += term.scr, bot += term.scr;
+	if (sel.ob.x == -1 || sel.alt != IS_SET(MODE_ALTSCREEN))
+		return;
 
-    if (BETWEEN(sel.nb.y, top, bot) != BETWEEN(sel.ne.y, top, bot)) {
-        selclear();
-    } else if (BETWEEN(sel.nb.y, top, bot)) {
-        selmove(n);
-        if (sel.nb.y < top || sel.ne.y > bot)
-            selclear();
+	if (BETWEEN(sel.nb.y, orig, term.bot) != BETWEEN(sel.ne.y, orig, term.bot)) {
+		selclear();
+	} else if (BETWEEN(sel.nb.y, orig, term.bot)) {
+		sel.ob.y += n;
+		sel.oe.y += n;
+		if (sel.ob.y < term.top || sel.ob.y > term.bot ||
+		    sel.oe.y < term.top || sel.oe.y > term.bot) {
+			selclear();
+		} else {
+			selnormalize();
+		}
 	}
 }
 
@@ -1334,7 +1166,7 @@ tnewline(int first_col)
 	int y = term.c.y;
 
 	if (y == term.bot) {
-		tscrollup(term.top, term.bot, 1, SCROLL_SAVEHIST);
+		tscrollup(term.top, 1, 1);
 	} else {
 		y++;
 	}
@@ -1398,126 +1230,115 @@ tmoveto(int x, int y)
 void
 tsetchar(Rune u, const Glyph *attr, int x, int y)
 {
-    static const char *vt100_0[62] = { /* 0x41 - 0x7e */
-        "↑", "↓", "→", "←", "█", "▚", "☃", /* A - G */
-        0, 0, 0, 0, 0, 0, 0, 0, /* H - O */
-        0, 0, 0, 0, 0, 0, 0, 0, /* P - W */
-        0, 0, 0, 0, 0, 0, 0, " ", /* X - _ */
-        "◆", "▒", "␉", "␌", "␍", "␊", "°", "±", /* ` - g */
-        "␤", "␋", "┘", "┐", "┌", "└", "┼", "⎺", /* h - o */
-        "⎻", "─", "⎼", "⎽", "├", "┤", "┴", "┬", /* p - w */
-        "│", "≤", "≥", "π", "≠", "£", "·", /* x - ~ */
-    };
+	static const char *vt100_0[62] = { /* 0x41 - 0x7e */
+		"↑", "↓", "→", "←", "█", "▚", "☃", /* A - G */
+		0, 0, 0, 0, 0, 0, 0, 0, /* H - O */
+		0, 0, 0, 0, 0, 0, 0, 0, /* P - W */
+		0, 0, 0, 0, 0, 0, 0, " ", /* X - _ */
+		"◆", "▒", "␉", "␌", "␍", "␊", "°", "±", /* ` - g */
+		"␤", "␋", "┘", "┐", "┌", "└", "┼", "⎺", /* h - o */
+		"⎻", "─", "⎼", "⎽", "├", "┤", "┴", "┬", /* p - w */
+		"│", "≤", "≥", "π", "≠", "£", "·", /* x - ~ */
+	};
 
-    /*
-     * The table is proudly stolen from rxvt.
-     */
-    if (term.trantbl[term.charset] == CS_GRAPHIC0 &&
-            BETWEEN(u, 0x41, 0x7e) && vt100_0[u - 0x41])
-        utf8decode(vt100_0[u - 0x41], &u, UTF_SIZ);
-
-    if (term.line[y][x].mode & ATTR_WIDE) {
-        if (x+1 < term.col) {
-            term.line[y][x+1].u = ' ';
-            term.line[y][x+1].mode &= ~ATTR_WDUMMY;
-        }
-    } else if (term.line[y][x].mode & ATTR_WDUMMY) {
-        term.line[y][x-1].u = ' ';
-        term.line[y][x-1].mode &= ~ATTR_WIDE;
-    }
+	/*
+	 * The table is proudly stolen from rxvt.
+	 */
+	if (term.trantbl[term.charset] == CS_GRAPHIC0 &&
+	   BETWEEN(u, 0x41, 0x7e) && vt100_0[u - 0x41])
+		utf8decode(vt100_0[u - 0x41], &u, UTF_SIZ);
+
+	if (term.line[y][x].mode & ATTR_WIDE) {
+		if (x+1 < term.col) {
+			term.line[y][x+1].u = ' ';
+			term.line[y][x+1].mode &= ~ATTR_WDUMMY;
+		}
+	} else if (term.line[y][x].mode & ATTR_WDUMMY) {
+		term.line[y][x-1].u = ' ';
+		term.line[y][x-1].mode &= ~ATTR_WIDE;
+	}
 
-    term.dirty[y] = 1;
-    term.line[y][x] = *attr;
-    term.line[y][x].u = u;
-    term.line[y][x].mode |= ATTR_SET;
+	term.dirty[y] = 1;
+	term.line[y][x] = *attr;
+	term.line[y][x].u = u;
 }
 
-
-
 void
-tclearglyph(Glyph *gp, int usecurattr)
+tclearregion(int x1, int y1, int x2, int y2)
 {
-	if (usecurattr) {
-		gp->fg = term.c.attr.fg;
-		gp->bg = term.c.attr.bg;
-	} else {
-		gp->fg = defaultfg;
-		gp->bg = defaultbg;
-	}
-	gp->mode = ATTR_NULL;
-	gp->u = ' ';
-}
+	int x, y, temp;
+	Glyph *gp;
 
+	if (x1 > x2)
+		temp = x1, x1 = x2, x2 = temp;
+	if (y1 > y2)
+		temp = y1, y1 = y2, y2 = temp;
 
+	LIMIT(x1, 0, term.col-1);
+	LIMIT(x2, 0, term.col-1);
+	LIMIT(y1, 0, term.row-1);
+	LIMIT(y2, 0, term.row-1);
 
-void
-tclearregion(int x1, int y1, int x2, int y2, int usecurattr)
-{
-	int x, y;
-	/* regionselected() takes relative coordinates */
-	if (regionselected(x1+term.scr, y1+term.scr, x2+term.scr, y2+term.scr))
-		selremove();
-
-    for (y = y1; y <= y2; y++) {
+	for (y = y1; y <= y2; y++) {
 		term.dirty[y] = 1;
-		for (x = x1; x <= x2; x++)
-			tclearglyph(&term.line[y][x], usecurattr);
+		for (x = x1; x <= x2; x++) {
+			gp = &term.line[y][x];
+			if (selected(x, y))
+				selclear();
+			gp->fg = term.c.attr.fg;
+			gp->bg = term.c.attr.bg;
+			gp->mode = 0;
+			gp->u = ' ';
+		}
 	}
 }
 
 void
 tdeletechar(int n)
 {
-    int src, dst, size;
-    Line line;
+	int dst, src, size;
+	Glyph *line;
+
+	LIMIT(n, 0, term.col - term.c.x);
 
-    if (n <= 0)
-        return;
+	dst = term.c.x;
+	src = term.c.x + n;
+	size = term.col - src;
+	line = term.line[term.c.y];
 
-    dst = term.c.x;
-    src = MIN(term.c.x + n, term.col);
-    size = term.col - src;
-    if (size > 0) {
-        /*
-         * otherwise src would point beyond the array
-         * https://stackoverflow.com/questions/29844298
-         */
-        line = term.line[term.c.y];
-        memmove(&line[dst], &line[src], size * sizeof(Glyph));
-    }
-    tclearregion(dst + size, term.c.y, term.col - 1, term.c.y, 1);
+	memmove(&line[dst], &line[src], size * sizeof(Glyph));
+	tclearregion(term.col-n, term.c.y, term.col-1, term.c.y);
 }
 
 void
 tinsertblank(int n)
 {
-    int src, dst, size;
-    Line line;
+	int dst, src, size;
+	Glyph *line;
+
+	LIMIT(n, 0, term.col - term.c.x);
+
+	dst = term.c.x + n;
+	src = term.c.x;
+	size = term.col - dst;
+	line = term.line[term.c.y];
 
-    if (n <= 0)
-        return;
-    dst = MIN(term.c.x + n, term.col);
-    src = term.c.x;
-    size = term.col - dst;
-    if (size > 0) { /* otherwise dst would point beyond the array */
-        line = term.line[term.c.y];
-        memmove(&line[dst], &line[src], size * sizeof(Glyph));
-    }
-    tclearregion(src, term.c.y, dst - 1, term.c.y, 1);
+	memmove(&line[dst], &line[src], size * sizeof(Glyph));
+	tclearregion(src, term.c.y, dst - 1, term.c.y);
 }
 
 void
 tinsertblankline(int n)
 {
 	if (BETWEEN(term.c.y, term.top, term.bot))
-		tscrolldown(term.c.y, n);
+		tscrolldown(term.c.y, n, 0);
 }
 
 void
 tdeleteline(int n)
 {
 	if (BETWEEN(term.c.y, term.top, term.bot))
-		tscrollup(term.c.y, term.bot, n, SCROLL_NOSAVEHIST);
+		tscrollup(term.c.y, n, 0);
 }
 
 int32_t
@@ -1941,25 +1758,25 @@ csihandle(void)
 	case 'K': /* EL -- Clear line */
 		switch (csiescseq.arg[0]) {
 		case 0: /* right */
-			tclearregion(term.c.x, term.c.y, term.col-1, term.c.y, 1);
+			tclearregion(term.c.x, term.c.y, term.col-1,
+					term.c.y);
 			break;
 		case 1: /* left */
-			tclearregion(0, term.c.y, term.c.x, term.c.y, 1);
+			tclearregion(0, term.c.y, term.c.x, term.c.y);
 			break;
 		case 2: /* all */
-			tclearregion(0, term.c.y, term.col-1, term.c.y, 1);
+			tclearregion(0, term.c.y, term.col-1, term.c.y);
 			break;
 		}
 		break;
 	case 'S': /* SU -- Scroll <n> line up */
 		if (csiescseq.priv) break;
 		DEFAULT(csiescseq.arg[0], 1);
-		/* xterm, urxvt, alacritty save this in history */
-		tscrollup(term.top, term.bot, csiescseq.arg[0], SCROLL_SAVEHIST);
+		tscrollup(term.top, csiescseq.arg[0], 0);
 		break;
 	case 'T': /* SD -- Scroll <n> line down */
 		DEFAULT(csiescseq.arg[0], 1);
-		tscrolldown(term.top, csiescseq.arg[0]);
+		tscrolldown(term.top, csiescseq.arg[0], 0);
 		break;
 	case 'L': /* IL -- Insert <n> blank lines */
 		DEFAULT(csiescseq.arg[0], 1);
@@ -2301,8 +2116,16 @@ tdumpsel(void)
 void
 tdumpline(int n)
 {
-    char str[(term.col + 1) * UTF_SIZ];
-    tprinter(str, tgetline(str, &term.line[n][0]));
+	char buf[UTF_SIZ];
+	const Glyph *bp, *end;
+
+	bp = &term.line[n][0];
+	end = &bp[MIN(tlinelen(n), term.col) - 1];
+	if (bp != end || bp->u != ' ') {
+		for ( ; bp <= end; ++bp)
+			tprinter(buf, utf8encode(bp->u, buf));
+	}
+	tprinter("\n", 1);
 }
 
 void
@@ -2523,7 +2346,7 @@ eschandle(uchar ascii)
 		return 0;
 	case 'D': /* IND -- Linefeed */
 		if (term.c.y == term.bot) {
-			tscrollup(term.top, term.bot, 1, SCROLL_SAVEHIST);
+			tscrollup(term.top, 1, 1);
 		} else {
 			tmoveto(term.c.x, term.c.y+1);
 		}
@@ -2756,285 +2576,94 @@ twrite(const char *buf, int buflen, int show_ctrl)
 	return n;
 }
 
-void
-rscrolldown(int n)
-{
-    int i;
-    Line temp;
-
-    /* can never be true as of now
-       if (IS_SET(MODE_ALTSCREEN))
-       return; */
-
-    if ((n = MIN(n, term.histf)) <= 0)
-        return;
-
-    for (i = term.c.y + n; i >= n; i--) {
-        temp = term.line[i];
-        term.line[i] = term.line[i-n];
-        term.line[i-n] = temp;
-    }
-    for (/*i = n - 1 */; i >= 0; i--) {
-        temp = term.line[i];
-        term.line[i] = term.hist[term.histi];
-        term.hist[term.histi] = temp;
-        term.histi = (term.histi - 1 + HISTSIZE) % HISTSIZE;
-    }
-    term.c.y += n;
-    term.histf -= n;
-    if ((i = term.scr - n) >= 0) {
-        term.scr = i;
-    } else {
-        term.scr = 0;
-        if (sel.ob.x != -1 && !sel.alt)
-            selmove(-i);
-    }
-}
-
-
-
 void
 tresize(int col, int row)
 {
+	int i, j;
+	int minrow = MIN(row, term.row);
+	int mincol = MIN(col, term.col);
 	int *bp;
+	TCursor c;
 
-	/* col and row are always MAX(_, 1)
 	if (col < 1 || row < 1) {
-		fprintf(stderr, "tresize: error resizing to %dx%d\n", col, row);
+		fprintf(stderr,
+		        "tresize: error resizing to %dx%d\n", col, row);
 		return;
-	} */
+	}
 
+	/*
+	 * slide screen to keep cursor where we expect it -
+	 * tscrollup would work here, but we can optimize to
+	 * memmove because we're freeing the earlier lines
+	 */
+	for (i = 0; i <= term.c.y - row; i++) {
+		free(term.line[i]);
+		free(term.alt[i]);
+	}
+	/* ensure that both src and dst are not NULL */
+	if (i > 0) {
+		memmove(term.line, term.line + i, row * sizeof(Line));
+		memmove(term.alt, term.alt + i, row * sizeof(Line));
+	}
+	for (i += row; i < term.row; i++) {
+		free(term.line[i]);
+		free(term.alt[i]);
+	}
+
+	/* resize to new height */
+	term.line = xrealloc(term.line, row * sizeof(Line));
+	term.alt  = xrealloc(term.alt,  row * sizeof(Line));
 	term.dirty = xrealloc(term.dirty, row * sizeof(*term.dirty));
 	term.tabs = xrealloc(term.tabs, col * sizeof(*term.tabs));
- 	if (col > term.col) {
- 		bp = term.tabs + term.col;
- 		memset(bp, 0, sizeof(*term.tabs) * (col - term.col));
- 		while (--bp > term.tabs && !*bp)
- 			/* nothing */ ;
- 		for (bp += tabspaces; bp < term.tabs + col; bp += tabspaces)
- 			*bp = 1;
- 	}
 
-	if (IS_SET(MODE_ALTSCREEN))
-		tresizealt(col, row);
-	else
-		tresizedef(col, row);
-}
+	for (i = 0; i < HISTSIZE; i++) {
+		term.hist[i] = xrealloc(term.hist[i], col * sizeof(Glyph));
+		for (j = mincol; j < col; j++) {
+			term.hist[i][j] = term.c.attr;
+			term.hist[i][j].u = ' ';
+		}
+	}
 
+	/* resize each row to new width, zero-pad if needed */
+	for (i = 0; i < minrow; i++) {
+		term.line[i] = xrealloc(term.line[i], col * sizeof(Glyph));
+		term.alt[i]  = xrealloc(term.alt[i],  col * sizeof(Glyph));
+	}
 
-void
-tresizedef(int col, int row)
-{
-	int i, j;
-
-	/* return if dimensions haven't changed */
-	if (term.col == col && term.row == row) {
-		tfulldirt();
-		return;
+	/* allocate any new rows */
+	for (/* i = minrow */; i < row; i++) {
+		term.line[i] = xmalloc(col * sizeof(Glyph));
+		term.alt[i] = xmalloc(col * sizeof(Glyph));
 	}
-	if (col != term.col) {
-		if (!sel.alt)
-			selremove();
-		treflow(col, row);
-	} else {
-		/* slide screen up if otherwise cursor would get out of the screen */
-		if (term.c.y >= row) {
-			tscrollup(0, term.row - 1, term.c.y - row + 1, SCROLL_RESIZE);
-			term.c.y = row - 1;
- 		}
-		for (i = row; i < term.row; i++)
-			free(term.line[i]);
-
-		/* resize to new height */
-		term.line = xrealloc(term.line, row * sizeof(Line));
-		/* allocate any new rows */
-		for (i = term.row; i < row; i++) {
-			term.line[i] = xmalloc(col * sizeof(Glyph));
-			for (j = 0; j < col; j++)
-				tclearglyph(&term.line[i][j], 0);
- 		}
-		/* scroll down as much as height has increased */
-		rscrolldown(row - term.row);
+	if (col > term.col) {
+		bp = term.tabs + term.col;
+
+		memset(bp, 0, sizeof(*term.tabs) * (col - term.col));
+		while (--bp > term.tabs && !*bp)
+			/* nothing */ ;
+		for (bp += tabspaces; bp < term.tabs + col; bp += tabspaces)
+			*bp = 1;
 	}
 	/* update terminal size */
-	term.col = col, term.row = row;
+	term.col = col;
+	term.row = row;
 	/* reset scrolling region */
-	term.top = 0, term.bot = row - 1;
-	/* dirty all lines */
-	tfulldirt();
-}
-
-
-
-void
-tresizealt(int col, int row)
-{
-    int i, j;
-
-    /* return if dimensions haven't changed */
-    if (term.col == col && term.row == row) {
-        tfulldirt();
-        return;
-    }
-    if (sel.alt)
-        selremove();
-    /* slide screen up if otherwise cursor would get out of the screen */
-    for (i = 0; i <= term.c.y - row; i++)
-        free(term.line[i]);
-    if (i > 0) {
-        /* ensure that both src and dst are not NULL */
-        memmove(term.line, term.line + i, row * sizeof(Line));
-        term.c.y = row - 1;
-    }
-    for (i += row; i < term.row; i++)
-        free(term.line[i]);
-    /* resize to new height */
-    term.line = xrealloc(term.line, row * sizeof(Line));
-    /* resize to new width */
-    for (i = 0; i < MIN(row, term.row); i++) {
-        term.line[i] = xrealloc(term.line[i], col * sizeof(Glyph));
-        for (j = term.col; j < col; j++)
-            tclearglyph(&term.line[i][j], 0);
-    }
-    /* allocate any new rows */
-    for (/*i = MIN(row, term.row) */; i < row; i++) {
-        term.line[i] = xmalloc(col * sizeof(Glyph));
-        for (j = 0; j < col; j++)
-            tclearglyph(&term.line[i][j], 0);
-    }
-    /* update cursor */
-    if (term.c.x >= col) {
-        term.c.state &= ~CURSOR_WRAPNEXT;
-        term.c.x = col - 1;
-    } else {
-        UPDATEWRAPNEXT(1, col);
-    }
-    /* update terminal size */
-    term.col = col, term.row = row;
-    /* reset scrolling region */
-    term.top = 0, term.bot = row - 1;
-    /* dirty all lines */
-    tfulldirt();
- }
-
-
-
-
-
-void
-treflow(int col, int row)
-{
-    int i, j;
-    int oce, nce, bot, scr;
-    int ox = 0, oy = -term.histf, nx = 0, ny = -1, len;
-    int cy = -1; /* proxy for new y coordinate of cursor */
-    int nlines;
-    Line *buf, line;
-
-    /* y coordinate of cursor line end */
-    for (oce = term.c.y; oce < term.row - 1 &&
-            tiswrapped(term.line[oce]); oce++);
-
-    nlines = term.histf + oce + 1;
-    if (col < term.col) {
-        /* each line can take this many lines after reflow */
-        j = (term.col + col - 1) / col;
-        nlines = j * nlines;
-        if (nlines > HISTSIZE + RESIZEBUFFER + row) {
-            nlines = HISTSIZE + RESIZEBUFFER + row;
-            oy = -(nlines / j - oce - 1);
-        }
-    }
-    buf = xmalloc(nlines * sizeof(Line));
-    do {
-        if (!nx)
-            buf[++ny] = xmalloc(col * sizeof(Glyph));
-        if (!ox) {
-            line = TLINEABS(oy);
-            len = tlinelen(line);
-        }
-        if (oy == term.c.y) {
-            if (!ox)
-                len = MAX(len, term.c.x + 1);
-            /* update cursor */
-            if (cy < 0 && term.c.x - ox < col - nx) {
-                term.c.x = nx + term.c.x - ox, cy = ny;
-                UPDATEWRAPNEXT(0, col);
-            }
-        }
-        /* get reflowed lines in buf */
-        if (col - nx > len - ox) {
-            memcpy(&buf[ny][nx], &line[ox], (len-ox) * sizeof(Glyph));
-            nx += len - ox;
-            if (len == 0 || !(line[len - 1].mode & ATTR_WRAP)) {
-                for (j = nx; j < col; j++)
-                    tclearglyph(&buf[ny][j], 0);
-                nx = 0;
-            } else if (nx > 0) {
-                buf[ny][nx - 1].mode &= ~ATTR_WRAP;
-            }
-            ox = 0, oy++;
-        } else if (col - nx == len - ox) {
-            memcpy(&buf[ny][nx], &line[ox], (col-nx) * sizeof(Glyph));
-            ox = 0, oy++, nx = 0;
-        } else/* if (col - nx < len - ox) */ {
-            memcpy(&buf[ny][nx], &line[ox], (col-nx) * sizeof(Glyph));
-            ox += col - nx;
-            buf[ny][col - 1].mode |= ATTR_WRAP;
-            nx = 0;
-        }
-    } while (oy <= oce);
-    if (nx)
-        for (j = nx; j < col; j++)
-            tclearglyph(&buf[ny][j], 0);
-
-    /* free extra lines */
-    for (i = row; i < term.row; i++)
-        free(term.line[i]);
-    /* resize to new height */
-    term.line = xrealloc(term.line, row * sizeof(Line));
-
-    bot = MIN(ny, row - 1);
-    scr = MAX(row - term.row, 0);
-    /* update y coordinate of cursor line end */
-    nce = MIN(oce + scr, bot);
-    /* update cursor y coordinate */
-    term.c.y = nce - (ny - cy);
-    if (term.c.y < 0) {
-        j = nce, nce = MIN(nce + -term.c.y, bot);
-        term.c.y += nce - j;
-        while (term.c.y < 0) {
-            free(buf[ny--]);
-            term.c.y++;
-        }
-    }
-    /* allocate new rows */
-    for (i = row - 1; i > nce; i--) {
-        term.line[i] = xmalloc(col * sizeof(Glyph));
-        for (j = 0; j < col; j++)
-            tclearglyph(&term.line[i][j], 0);
-    }
-    /* fill visible area */
-    for (/*i = nce */; i >= term.row; i--, ny--)
-        term.line[i] = buf[ny];
-    for (/*i = term.row - 1 */; i >= 0; i--, ny--) {
-        free(term.line[i]);
-        term.line[i] = buf[ny];
-    }
-    /* fill lines in history buffer and update term.histf */
-    for (/*i = -1 */; ny >= 0 && i >= -HISTSIZE; i--, ny--) {
-        j = (term.histi + i + 1 + HISTSIZE) % HISTSIZE;
-        free(term.hist[j]);
-        term.hist[j] = buf[ny];
-    }
-    term.histf = -i - 1;
-    term.scr = MIN(term.scr, term.histf);
-    /* resize rest of the history lines */
-    for (/*i = -term.histf - 1 */; i >= -HISTSIZE; i--) {
-        j = (term.histi + i + 1 + HISTSIZE) % HISTSIZE;
-        term.hist[j] = xrealloc(term.hist[j], col * sizeof(Glyph));
-    }
-    free(buf);
+	tsetscroll(0, row-1);
+	/* make use of the LIMIT in tmoveto */
+	tmoveto(term.c.x, term.c.y);
+	/* Clearing both screens (it makes dirty all lines) */
+	c = term.c;
+	for (i = 0; i < 2; i++) {
+		if (mincol < col && 0 < minrow) {
+			tclearregion(mincol, 0, col - 1, minrow - 1);
+		}
+		if (0 < col && minrow < row) {
+			tclearregion(0, minrow, col - 1, row - 1);
+		}
+		tswapscreen();
+		tcursor(CURSOR_LOAD);
+	}
+	term.c = c;
 }
 
 void
@@ -3074,8 +2703,9 @@ draw(void)
 		cx--;
 
 	drawregion(0, 0, term.col, term.row);
-	xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
-			term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
+	if (term.scr == 0)
+		xdrawcursor(cx, term.c.y, term.line[term.c.y][cx],
+				term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
 	term.ocx = cx;
 	term.ocy = term.c.y;
 	xfinishdraw();
